variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  PathToSolution: 'AsyncAwaitBestPractices.sln'
  PathToSampleAppCsproj: 'sample/HackerNews.csproj'
  PathToUnitTestsCsproj: 'src/AsyncAwaitBestPractices.UnitTests/AsyncAwaitBestPractices.UnitTests.csproj'
  PathToAsyncAwaitBestPracticesCsproj: 'src/AsyncAwaitBestPractices/AsyncAwaitBestPractices.csproj'
  PathToAsyncAwaitBestPracticesMVVMCsproj: 'src/AsyncAwaitBestPractices.MVVM/AsyncAwaitBestPractices.MVVM.csproj'
  Xcode_Version: '14.3.0'

trigger:
  branches:
    include:
    - main
  tags:
    include:
    - '*'

pr:
  autoCancel: 'true'
  branches:
    include:
    - main

jobs:     
  - job: build_sample
    displayName: Build .NET MAUI Sample App
    strategy:
      matrix:
        'Windows':
          image: 'windows-latest'
        'macOS':
          image: 'macos-13'
    pool:
      vmImage: $(image)
    
    steps:
      - task: CmdLine@2
        displayName: 'Set Xcode v$(Xcode_Version)'
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
          script: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(Xcode_Version).app;sudo xcode-select --switch /Applications/Xcode_$(Xcode_Version).app/Contents/Developer

      - task: UseDotNet@2
        displayName: 'Use .Net Core SDK  7.0.x'
        inputs:
          version: '7.0.x'
          packageType: 'sdk'

      - powershell: dotnet workload install maui
        displayName: Install Latest .NET MAUI Workload

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        inputs:
          checkLatest: true

      - task: VSBuild@1
        displayName: 'Build Sample App'
        inputs:
          solution: '$(PathToSampleAppCsproj)'
          configuration: 'Release'
          msbuildArgs: '/restore'

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '**\bin\$(BuildConfiguration)\**'
          TargetFolder: '$(build.artifactstagingdirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'

  - job: build_test_library
    displayName: Build + Test Library
    strategy:
      matrix:
        'Windows':
          image: 'windows-latest'
        'macOS':
          image: 'macos-13'
    pool:
      vmImage: $(image)
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK 2.1.x'
      inputs:
        version: ' 2.1.x'
        includePreviewVersions: true
        packageType: 'sdk'

    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK 3.0.x'
      inputs:
        version: ' 3.0.x'
        packageType: 'sdk'

    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK  6.0.x'
      inputs:
        version: ' 6.0.x'
        packageType: 'sdk'

    - task: UseDotNet@2
      displayName: 'Use .Net Core SDK  7.0.x'
      inputs:
        version: '7.0.x'
        packageType: 'sdk'

    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet'
      inputs:
        checkLatest: true

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: test
        projects: '$(PathToUnitTestsCsproj)'
        arguments: '-c   Release'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**\bin\$(BuildConfiguration)\**'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'